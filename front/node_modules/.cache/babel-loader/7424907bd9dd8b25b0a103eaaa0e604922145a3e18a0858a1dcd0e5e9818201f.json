{"ast":null,"code":"var _jsxFileName = \"/home/viktoria/study/ncs/Final_NCS/front/src/pages/search/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from \"react\";\nimport './search_page.css';\nimport { Element } from \"../../components/element\";\nimport { CartContext } from '../../components/provider';\nimport API_BASE_URL from \"../../api\"; // Make sure this points to your backend API\nimport defaultImage from '../../images/1.png';\n\n// export const SearchPage = () => {\n// const { addToCart } = useContext(CartContext); // Context for adding items to cart\n// const [products, setProducts] = useState([]); // State to hold products from the database\n// const [searchQuery, setSearchQuery] = useState(\"\"); // State for search input\n// const [filter, setFilter] = useState(\"all\"); // Optional filter state (if applicable)\n\n// // Fetch products from the backend\n// // useEffect(() => {\n// //     const fetchProducts = async () => {\n// //         try {\n// //             const response = await fetch(`${API_BASE_URL}/products?q=${searchQuery}`);\n// //             if (!response.ok) {\n// //                 throw new Error(\"Failed to fetch products\");\n// //             }\n// //             const data = await response.json();\n// //             setProducts(data); // Store fetched products in state\n// //         } catch (error) {\n// //             console.error(\"Error fetching products:\", error);\n// //         }\n// //     };\n\n// //     fetchProducts();\n// // }, [searchQuery]);\n\n// // // Filter products based on search query and optional filter\n// // const filteredProducts = products.filter((product) =>\n// //     product.name.toLowerCase().includes(searchQuery.toLowerCase()) &&\n// //     (filter === \"all\" ? true : product.type === filter)\n// // );\n\n// useEffect(() => {\n//     const fetchAllProducts = async () => {\n//         try {\n//             const response = await fetch(`${API_BASE_URL}/api/products`);\n//             if (!response.ok) {\n//                 throw new Error(\"Network response was not ok\");\n//             }\n//             const data = await response.json();\n//             setProducts(data);\n//         } catch (err) {\n//             console.error(\"Error fetching all products:\", err);\n//         }\n//     };\n\n//     fetchAllProducts();\n// }, []);\n\n// const handleSearch = async () => {\n//     try {\n//         const response = await fetch(`${API_BASE_URL}/api/products/search?q=${encodeURIComponent(searchQuery)}`);\n//         if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//         }\n//         const data = await response.json();\n//         setProducts(data);\n//     } catch (err) {\n//         console.error(\"An error occurred:\", err);\n//     }\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchPage = () => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const {\n    addToCart\n  } = useContext(CartContext);\n  const [query, setQuery] = useState(\"\");\n  useEffect(() => {\n    const fetchAllProducts = async () => {\n      try {\n        const response = await fetch(`${API_BASE_URL}/products`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch products\");\n        }\n        const data = await response.json();\n        setProducts(data);\n      } catch (error) {\n        console.error(\"Error fetching all products:\", error);\n      }\n    };\n    fetchAllProducts();\n  }, []);\n  const handleSearch = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/products/search?q=${encodeURIComponent(query)}`);\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const data = await response.json();\n      setProducts(data);\n    } catch (err) {\n      console.error(\"Error fetching products:\", err);\n    }\n  };\n\n  // Add product to cart\n  const handleSelect = product => {\n    addToCart(product);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search_page\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"search_title\",\n      children: \"Product Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search...\",\n      value: searchQuery,\n      onChange: e => setSearchQuery(e.target.value),\n      className: \"search_input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search_grid\",\n      children: products.map(product => /*#__PURE__*/_jsxDEV(Element, {\n        plantTitle: product.name,\n        plantImage: defaultImage,\n        plantClick: () => handleSelect(product)\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchPage, \"nxsBACExq2al3TWO6reuriRJNyg=\");\n_c = SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useContext","useState","useEffect","Element","CartContext","API_BASE_URL","defaultImage","jsxDEV","_jsxDEV","SearchPage","_s","products","setProducts","searchQuery","setSearchQuery","addToCart","query","setQuery","fetchAllProducts","response","fetch","ok","Error","data","json","error","console","handleSearch","encodeURIComponent","err","handleSelect","product","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","plantTitle","name","plantImage","plantClick","id","_c","$RefreshReg$"],"sources":["/home/viktoria/study/ncs/Final_NCS/front/src/pages/search/index.jsx"],"sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport './search_page.css';\nimport { Element } from \"../../components/element\";\nimport { CartContext } from '../../components/provider';\nimport API_BASE_URL from \"../../api\"; // Make sure this points to your backend API\nimport defaultImage from '../../images/1.png';\n\n\n// export const SearchPage = () => {\n    // const { addToCart } = useContext(CartContext); // Context for adding items to cart\n    // const [products, setProducts] = useState([]); // State to hold products from the database\n    // const [searchQuery, setSearchQuery] = useState(\"\"); // State for search input\n    // const [filter, setFilter] = useState(\"all\"); // Optional filter state (if applicable)\n\n    // // Fetch products from the backend\n    // // useEffect(() => {\n    // //     const fetchProducts = async () => {\n    // //         try {\n    // //             const response = await fetch(`${API_BASE_URL}/products?q=${searchQuery}`);\n    // //             if (!response.ok) {\n    // //                 throw new Error(\"Failed to fetch products\");\n    // //             }\n    // //             const data = await response.json();\n    // //             setProducts(data); // Store fetched products in state\n    // //         } catch (error) {\n    // //             console.error(\"Error fetching products:\", error);\n    // //         }\n    // //     };\n    \n    // //     fetchProducts();\n    // // }, [searchQuery]);\n\n    // // // Filter products based on search query and optional filter\n    // // const filteredProducts = products.filter((product) =>\n    // //     product.name.toLowerCase().includes(searchQuery.toLowerCase()) &&\n    // //     (filter === \"all\" ? true : product.type === filter)\n    // // );\n\n    // useEffect(() => {\n    //     const fetchAllProducts = async () => {\n    //         try {\n    //             const response = await fetch(`${API_BASE_URL}/api/products`);\n    //             if (!response.ok) {\n    //                 throw new Error(\"Network response was not ok\");\n    //             }\n    //             const data = await response.json();\n    //             setProducts(data);\n    //         } catch (err) {\n    //             console.error(\"Error fetching all products:\", err);\n    //         }\n    //     };\n    \n    //     fetchAllProducts();\n    // }, []);\n\n    // const handleSearch = async () => {\n    //     try {\n    //         const response = await fetch(`${API_BASE_URL}/api/products/search?q=${encodeURIComponent(searchQuery)}`);\n    //         if (!response.ok) {\n    //             throw new Error(\"Network response was not ok\");\n    //         }\n    //         const data = await response.json();\n    //         setProducts(data);\n    //     } catch (err) {\n    //         console.error(\"An error occurred:\", err);\n    //     }\n    // };\n\nexport const SearchPage = () => {\n        const [products, setProducts] = useState([]);\n        const [searchQuery, setSearchQuery] = useState(\"\");\n        const { addToCart } = useContext(CartContext);\n        const [query, setQuery] = useState(\"\");\n    \n        useEffect(() => {\n            const fetchAllProducts = async () => {\n                try {\n                    const response = await fetch(`${API_BASE_URL}/products`);\n                    if (!response.ok) {\n                        throw new Error(\"Failed to fetch products\");\n                    }\n                    const data = await response.json();\n                    setProducts(data);\n                } catch (error) {\n                    console.error(\"Error fetching all products:\", error);\n                }\n            };\n    \n            fetchAllProducts();\n        }, []);\n    \n        const handleSearch = async () => {\n            try {\n                const response = await fetch(`${API_BASE_URL}/products/search?q=${encodeURIComponent(query)}`);\n                if (!response.ok) {\n                  throw new Error(\"Network response was not ok\");\n                }\n                const data = await response.json();\n                setProducts(data);\n              } catch (err) {\n                console.error(\"Error fetching products:\", err);\n              }\n        };\n    \n    // Add product to cart\n    const handleSelect = (product) => {\n        addToCart(product);\n    };\n\n    return (\n        <div className=\"search_page\">\n            <p className=\"search_title\">Product Search</p>\n            <input\n                type=\"text\"\n                placeholder=\"Search...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"search_input\"\n            />\n            <button onClick={handleSearch}>Search</button>\n            <div className=\"search_grid\">\n                {products.map((product) => (\n                    <Element\n                        key={product.id}\n                        plantTitle={product.name}\n                        plantImage={defaultImage} \n                        plantClick={() => handleSelect(product)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}