{"ast":null,"code":"var _jsxFileName = \"/home/viktoria/study/ncs/Final_NCS/front/src/pages/search/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from \"react\";\nimport './search_page.css';\nimport { Element } from \"../../components/element\";\nimport { CartContext } from '../../components/provider';\nimport API_BASE_URL from \"../../api\"; // Make sure this points to your backend API\nimport defaultImage from '../../images/1.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchPage = () => {\n  _s();\n  const {\n    addToCart\n  } = useContext(CartContext); // Context for adding items to cart\n  const [products, setProducts] = useState([]); // State to hold products from the database\n  const [searchQuery, setSearchQuery] = useState(\"\"); // State for search input\n  const [filter, setFilter] = useState(\"all\"); // Optional filter state (if applicable)\n\n  // Fetch products from the backend\n  // useEffect(() => {\n  //     const fetchProducts = async () => {\n  //         try {\n  //             const response = await fetch(`${API_BASE_URL}/products?q=${searchQuery}`);\n  //             if (!response.ok) {\n  //                 throw new Error(\"Failed to fetch products\");\n  //             }\n  //             const data = await response.json();\n  //             setProducts(data); // Store fetched products in state\n  //         } catch (error) {\n  //             console.error(\"Error fetching products:\", error);\n  //         }\n  //     };\n\n  //     fetchProducts();\n  // }, [searchQuery]);\n\n  // // Filter products based on search query and optional filter\n  // const filteredProducts = products.filter((product) =>\n  //     product.name.toLowerCase().includes(searchQuery.toLowerCase()) &&\n  //     (filter === \"all\" ? true : product.type === filter)\n  // );\n\n  const handleSearch = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/products/search?q=${encodeURIComponent(searchQuery)}`);\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const data = await response.json();\n      setProducts(data);\n    } catch (err) {\n      console.error(\"An error occurred:\", err);\n    }\n  };\n\n  // Add product to cart\n  const handleSelect = product => {\n    addToCart(product);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search_page\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"search_title\",\n      children: \"Product Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search...\",\n      value: searchQuery,\n      onChange: e => setSearchQuery(e.target.value),\n      className: \"search_input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      className: \"search_button\",\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search_grid\",\n      children: filteredProducts.map(product => /*#__PURE__*/_jsxDEV(Element, {\n        plantTitle: product.name,\n        plantImage: defaultImage,\n        plantClick: () => handleSelect(product)\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchPage, \"pPNmrQ592rT4bYXOstNni3EPYkE=\");\n_c = SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useContext","useState","useEffect","Element","CartContext","API_BASE_URL","defaultImage","jsxDEV","_jsxDEV","SearchPage","_s","addToCart","products","setProducts","searchQuery","setSearchQuery","filter","setFilter","handleSearch","response","fetch","encodeURIComponent","ok","Error","data","json","err","console","error","handleSelect","product","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","filteredProducts","map","plantTitle","name","plantImage","plantClick","id","_c","$RefreshReg$"],"sources":["/home/viktoria/study/ncs/Final_NCS/front/src/pages/search/index.jsx"],"sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport './search_page.css';\nimport { Element } from \"../../components/element\";\nimport { CartContext } from '../../components/provider';\nimport API_BASE_URL from \"../../api\"; // Make sure this points to your backend API\nimport defaultImage from '../../images/1.png';\n\n\nexport const SearchPage = () => {\n    const { addToCart } = useContext(CartContext); // Context for adding items to cart\n    const [products, setProducts] = useState([]); // State to hold products from the database\n    const [searchQuery, setSearchQuery] = useState(\"\"); // State for search input\n    const [filter, setFilter] = useState(\"all\"); // Optional filter state (if applicable)\n\n    // Fetch products from the backend\n    // useEffect(() => {\n    //     const fetchProducts = async () => {\n    //         try {\n    //             const response = await fetch(`${API_BASE_URL}/products?q=${searchQuery}`);\n    //             if (!response.ok) {\n    //                 throw new Error(\"Failed to fetch products\");\n    //             }\n    //             const data = await response.json();\n    //             setProducts(data); // Store fetched products in state\n    //         } catch (error) {\n    //             console.error(\"Error fetching products:\", error);\n    //         }\n    //     };\n    \n    //     fetchProducts();\n    // }, [searchQuery]);\n\n    // // Filter products based on search query and optional filter\n    // const filteredProducts = products.filter((product) =>\n    //     product.name.toLowerCase().includes(searchQuery.toLowerCase()) &&\n    //     (filter === \"all\" ? true : product.type === filter)\n    // );\n\n    const handleSearch = async () => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/api/products/search?q=${encodeURIComponent(searchQuery)}`);\n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n            const data = await response.json();\n            setProducts(data);\n        } catch (err) {\n            console.error(\"An error occurred:\", err);\n        }\n    };\n\n    // Add product to cart\n    const handleSelect = (product) => {\n        addToCart(product);\n    };\n\n    return (\n        <div className=\"search_page\">\n            <p className=\"search_title\">Product Search</p>\n            <input\n                type=\"text\"\n                placeholder=\"Search...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"search_input\"\n            />\n            <button onClick={handleSearch} className=\"search_button\">Search</button>\n            <div className=\"search_grid\">\n                {filteredProducts.map((product) => (\n                    <Element\n                        key={product.id}\n                        plantTitle={product.name}\n                        plantImage={defaultImage} \n                        plantClick={() => handleSelect(product)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}